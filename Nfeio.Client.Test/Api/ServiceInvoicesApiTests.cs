using IO.Swagger.Api;
using IO.Swagger.Client;
using IO.Swagger.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using Nfeio.Client.Test.Factory;
using System;
using System.Threading;
using static IO.Swagger.Model.ServiceInvoiceResource;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ServiceInvoicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>

    [TestClass]
    public class ServiceInvoicesApiTests
    {
        private ServiceInvoicesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            Configuration.Default.ApiKey.Add("Authorization", "IZCNaN3gT9NCnjd1Cm6zCP5kK0CFeFqw9fMZNuTgR6fgobSlk8yALCf8lCUyvZZriJI");
            instance = new ServiceInvoicesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TestCleanup]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServiceInvoicesApi
        /// </summary>
        [TestMethod]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceInvoicesApi
            //Assert.IsInstanceOfType(typeof(ServiceInvoicesApi), instance, "instance is a ServiceInvoicesApi");
        }


        /// <summary>
        /// Test ServiceInvoicesDelete
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesDeleteTest()
        {
            var companyId = "59444568f933f61ea009dad2";

            var invoiceRequest = ServiceInvoiceIssueMessageFactory.GetObj();

            var invoiceResponse = instance.ServiceInvoicesPost(companyId, invoiceRequest);

            string id = invoiceResponse.Id;

            #region Gambiarra maligna pra alterar o status do invoice de created pra issued

            bool flag = false;
            do
            {
                var getResponse = instance.ServiceInvoicesGet_0(companyId, id);
                flag = getResponse.Status.Value.Equals(StatusEnum.Issued);
                Thread.Sleep(500);

            } while (flag == false);

            #endregion

            var jsonResponse = instance.ServiceInvoicesDelete(companyId, id);

            Assert.IsNotNull(jsonResponse);

            var responseObj = JsonConvert.DeserializeObject<ServiceInvoiceResource>(jsonResponse);

            Assert.AreEqual(FlowStatusEnum.WaitingSendCancel, responseObj.FlowStatus.Value);
        }

        /// <summary>
        /// Test ServiceInvoicesGet
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesGetTest()
        {
            var companyId = "59444568f933f61ea009dad2";
            int? pageCount = 1;
            int? pageIndex = 1;
            var response = instance.ServiceInvoicesGet(companyId, pageCount, pageIndex);
            Assert.IsNotNull(response);
            Assert.IsNotNull(response.ServiceInvoices);
            Assert.IsTrue(response.ServiceInvoices.Count > 0);
        }

        /// <summary>
        /// Test ServiceInvoicesGetDocumentPdf
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesGetDocumentPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesGetDocumentPdf(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ServiceInvoicesGetDocumentXml
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesGetDocumentXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesGetDocumentXml(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ServiceInvoicesGet_0
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesGet_0Test()
        {
            var companyId = "59444568f933f61ea009dad2";
            string id = "5948156558bd3f07a4fd2c65";
            var getResponse = instance.ServiceInvoicesGet_0(companyId, id);

            Assert.IsNotNull(getResponse);
            //Assert.IsTrue(response.Status == ServiceInvoiceResource.StatusEnum.Issued);
        }

        /// <summary>
        /// Test ServiceInvoicesPost
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesPostTest()
        {

            var companyId = "59444568f933f61ea009dad2";

            var invoiceRequest = ServiceInvoiceIssueMessageFactory.GetObj();

            var invoiceResponse = instance.ServiceInvoicesPost(companyId, invoiceRequest);

            Assert.IsNotNull(invoiceResponse);
            Assert.IsTrue(invoiceResponse.Status == ServiceInvoiceResource.StatusEnum.Created);
        }

        /// <summary>
        /// Test ServiceInvoicesPullProcess
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesPullProcessTest()
        {
            //var companyId = "59444568f933f61ea009dad2";
            //DateRange dateRange = new DateRange(DateTime.Now.AddMonths(-1), DateTime.UtcNow);
            //var response = instance.ServiceInvoicesPullProcess(companyId, dateRange);
            //Assert.IsInstanceOfType(response, typeof(string));
        }

        /// <summary>
        /// Test ServiceInvoicesSendEmail
        /// </summary>
        [TestMethod]
        public void ServiceInvoicesSendEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesSendEmail(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

    }

}
