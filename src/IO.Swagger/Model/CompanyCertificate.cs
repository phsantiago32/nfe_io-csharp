/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyCertificate
    /// </summary>
    [DataContract]
    public partial class CompanyCertificate :  IEquatable<CompanyCertificate>, IValidatableObject
    {
        /// <summary>
        /// Status do certificado
        /// </summary>
        /// <value>Status do certificado</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Overdue for "Overdue"
            /// </summary>
            [EnumMember(Value = "Overdue")]
            Overdue,
            
            /// <summary>
            /// Enum Pending for "Pending"
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Active for "Active"
            /// </summary>
            [EnumMember(Value = "Active")]
            Active
        }

        /// <summary>
        /// Status do certificado
        /// </summary>
        /// <value>Status do certificado</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCertificate" /> class.
        /// </summary>
        /// <param name="Thumbprint">Thumbprint certificado.</param>
        /// <param name="ModifiedOn">Certificado alterado em.</param>
        /// <param name="ExpiresOn">Certificado expira em.</param>
        /// <param name="Status">Status do certificado.</param>
        public CompanyCertificate(string Thumbprint = default(string), DateTime? ModifiedOn = default(DateTime?), DateTime? ExpiresOn = default(DateTime?), StatusEnum? Status = default(StatusEnum?))
        {
            this.Thumbprint = Thumbprint;
            this.ModifiedOn = ModifiedOn;
            this.ExpiresOn = ExpiresOn;
            this.Status = Status;
        }
        
        /// <summary>
        /// Thumbprint certificado
        /// </summary>
        /// <value>Thumbprint certificado</value>
        [DataMember(Name="thumbprint", EmitDefaultValue=false)]
        public string Thumbprint { get; set; }
        /// <summary>
        /// Certificado alterado em
        /// </summary>
        /// <value>Certificado alterado em</value>
        [DataMember(Name="modifiedOn", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; set; }
        /// <summary>
        /// Certificado expira em
        /// </summary>
        /// <value>Certificado expira em</value>
        [DataMember(Name="expiresOn", EmitDefaultValue=false)]
        public DateTime? ExpiresOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyCertificate {\n");
            sb.Append("  Thumbprint: ").Append(Thumbprint).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyCertificate);
        }

        /// <summary>
        /// Returns true if CompanyCertificate instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyCertificate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyCertificate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Thumbprint == other.Thumbprint ||
                    this.Thumbprint != null &&
                    this.Thumbprint.Equals(other.Thumbprint)
                ) && 
                (
                    this.ModifiedOn == other.ModifiedOn ||
                    this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(other.ModifiedOn)
                ) && 
                (
                    this.ExpiresOn == other.ExpiresOn ||
                    this.ExpiresOn != null &&
                    this.ExpiresOn.Equals(other.ExpiresOn)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Thumbprint != null)
                    hash = hash * 59 + this.Thumbprint.GetHashCode();
                if (this.ModifiedOn != null)
                    hash = hash * 59 + this.ModifiedOn.GetHashCode();
                if (this.ExpiresOn != null)
                    hash = hash * 59 + this.ExpiresOn.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
