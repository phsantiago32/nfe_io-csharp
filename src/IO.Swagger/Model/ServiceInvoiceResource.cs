/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceInvoiceResource
    /// </summary>
    [DataContract]
    public partial class ServiceInvoiceResource :  IEquatable<ServiceInvoiceResource>, IValidatableObject
    {
        /// <summary>
        /// Ambiente de Processamento
        /// </summary>
        /// <value>Ambiente de Processamento</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnvironmentEnum
        {
            
            /// <summary>
            /// Enum Development for "Development"
            /// </summary>
            [EnumMember(Value = "Development")]
            Development,
            
            /// <summary>
            /// Enum Production for "Production"
            /// </summary>
            [EnumMember(Value = "Production")]
            Production,
            
            /// <summary>
            /// Enum Staging for "Staging"
            /// </summary>
            [EnumMember(Value = "Staging")]
            Staging
        }

        /// <summary>
        /// Status do processamento
        /// </summary>
        /// <value>Status do processamento</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowStatusEnum
        {
            
            /// <summary>
            /// Enum CancelFailed for "CancelFailed"
            /// </summary>
            [EnumMember(Value = "CancelFailed")]
            CancelFailed,
            
            /// <summary>
            /// Enum IssueFailed for "IssueFailed"
            /// </summary>
            [EnumMember(Value = "IssueFailed")]
            IssueFailed,
            
            /// <summary>
            /// Enum Issued for "Issued"
            /// </summary>
            [EnumMember(Value = "Issued")]
            Issued,
            
            /// <summary>
            /// Enum Cancelled for "Cancelled"
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum PullFromCityHall for "PullFromCityHall"
            /// </summary>
            [EnumMember(Value = "PullFromCityHall")]
            PullFromCityHall,
            
            /// <summary>
            /// Enum WaitingCalculateTaxes for "WaitingCalculateTaxes"
            /// </summary>
            [EnumMember(Value = "WaitingCalculateTaxes")]
            WaitingCalculateTaxes,
            
            /// <summary>
            /// Enum WaitingDefineRpsNumber for "WaitingDefineRpsNumber"
            /// </summary>
            [EnumMember(Value = "WaitingDefineRpsNumber")]
            WaitingDefineRpsNumber,
            
            /// <summary>
            /// Enum WaitingSend for "WaitingSend"
            /// </summary>
            [EnumMember(Value = "WaitingSend")]
            WaitingSend,
            
            /// <summary>
            /// Enum WaitingSendCancel for "WaitingSendCancel"
            /// </summary>
            [EnumMember(Value = "WaitingSendCancel")]
            WaitingSendCancel,
            
            /// <summary>
            /// Enum WaitingReturn for "WaitingReturn"
            /// </summary>
            [EnumMember(Value = "WaitingReturn")]
            WaitingReturn,
            
            /// <summary>
            /// Enum WaitingDownload for "WaitingDownload"
            /// </summary>
            [EnumMember(Value = "WaitingDownload")]
            WaitingDownload
        }

        /// <summary>
        /// Status da NFE
        /// </summary>
        /// <value>Status da NFE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Error for "Error"
            /// </summary>
            [EnumMember(Value = "Error")]
            Error,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Created for "Created"
            /// </summary>
            [EnumMember(Value = "Created")]
            Created,
            
            /// <summary>
            /// Enum Issued for "Issued"
            /// </summary>
            [EnumMember(Value = "Issued")]
            Issued,
            
            /// <summary>
            /// Enum Cancelled for "Cancelled"
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled
        }

        /// <summary>
        /// Tipo da RPS
        /// </summary>
        /// <value>Tipo da RPS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RpsTypeEnum
        {
            
            /// <summary>
            /// Enum Rps for "Rps"
            /// </summary>
            [EnumMember(Value = "Rps")]
            Rps,
            
            /// <summary>
            /// Enum RpsMista for "RpsMista"
            /// </summary>
            [EnumMember(Value = "RpsMista")]
            RpsMista,
            
            /// <summary>
            /// Enum Cupom for "Cupom"
            /// </summary>
            [EnumMember(Value = "Cupom")]
            Cupom
        }

        /// <summary>
        /// Status da RPS
        /// </summary>
        /// <value>Status da RPS</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RpsStatusEnum
        {
            
            /// <summary>
            /// Enum Normal for "Normal"
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal,
            
            /// <summary>
            /// Enum Canceled for "Canceled"
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled,
            
            /// <summary>
            /// Enum Lost for "Lost"
            /// </summary>
            [EnumMember(Value = "Lost")]
            Lost
        }

        /// <summary>
        /// Tipo da tributação
        /// </summary>
        /// <value>Tipo da tributação</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxationTypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum WithinCity for "WithinCity"
            /// </summary>
            [EnumMember(Value = "WithinCity")]
            WithinCity,
            
            /// <summary>
            /// Enum OutsideCity for "OutsideCity"
            /// </summary>
            [EnumMember(Value = "OutsideCity")]
            OutsideCity,
            
            /// <summary>
            /// Enum Export for "Export"
            /// </summary>
            [EnumMember(Value = "Export")]
            Export,
            
            /// <summary>
            /// Enum Free for "Free"
            /// </summary>
            [EnumMember(Value = "Free")]
            Free,
            
            /// <summary>
            /// Enum Immune for "Immune"
            /// </summary>
            [EnumMember(Value = "Immune")]
            Immune,
            
            /// <summary>
            /// Enum SuspendedCourtDecision for "SuspendedCourtDecision"
            /// </summary>
            [EnumMember(Value = "SuspendedCourtDecision")]
            SuspendedCourtDecision,
            
            /// <summary>
            /// Enum SuspendedAdministrativeProcedure for "SuspendedAdministrativeProcedure"
            /// </summary>
            [EnumMember(Value = "SuspendedAdministrativeProcedure")]
            SuspendedAdministrativeProcedure,
            
            /// <summary>
            /// Enum OutsideCityFree for "OutsideCityFree"
            /// </summary>
            [EnumMember(Value = "OutsideCityFree")]
            OutsideCityFree,
            
            /// <summary>
            /// Enum OutsideCityImmune for "OutsideCityImmune"
            /// </summary>
            [EnumMember(Value = "OutsideCityImmune")]
            OutsideCityImmune,
            
            /// <summary>
            /// Enum OutsideCitySuspended for "OutsideCitySuspended"
            /// </summary>
            [EnumMember(Value = "OutsideCitySuspended")]
            OutsideCitySuspended,
            
            /// <summary>
            /// Enum OutsideCitySuspendedAdministrativeProcedure for "OutsideCitySuspendedAdministrativeProcedure"
            /// </summary>
            [EnumMember(Value = "OutsideCitySuspendedAdministrativeProcedure")]
            OutsideCitySuspendedAdministrativeProcedure
        }

        /// <summary>
        /// Ambiente de Processamento
        /// </summary>
        /// <value>Ambiente de Processamento</value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public EnvironmentEnum? Environment { get; set; }
        /// <summary>
        /// Status do processamento
        /// </summary>
        /// <value>Status do processamento</value>
        [DataMember(Name="flowStatus", EmitDefaultValue=false)]
        public FlowStatusEnum? FlowStatus { get; set; }
        /// <summary>
        /// Status da NFE
        /// </summary>
        /// <value>Status da NFE</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Tipo da RPS
        /// </summary>
        /// <value>Tipo da RPS</value>
        [DataMember(Name="rpsType", EmitDefaultValue=false)]
        public RpsTypeEnum? RpsType { get; set; }
        /// <summary>
        /// Status da RPS
        /// </summary>
        /// <value>Status da RPS</value>
        [DataMember(Name="rpsStatus", EmitDefaultValue=false)]
        public RpsStatusEnum? RpsStatus { get; set; }
        /// <summary>
        /// Tipo da tributação
        /// </summary>
        /// <value>Tipo da tributação</value>
        [DataMember(Name="taxationType", EmitDefaultValue=false)]
        public TaxationTypeEnum? TaxationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceInvoiceResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceInvoiceResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceInvoiceResource" /> class.
        /// </summary>
        /// <param name="Id">Identificação.</param>
        /// <param name="Environment">Ambiente de Processamento (required).</param>
        /// <param name="FlowStatus">Status do processamento.</param>
        /// <param name="FlowMessage">Mensagem de processamento.</param>
        /// <param name="Provider">Prestador dos serviços.</param>
        /// <param name="Borrower">Tomador dos serviços.</param>
        /// <param name="BatchNumber">Número do lote da RPS.</param>
        /// <param name="BatchCheckNumber">Número do protocolo do lote da RPS.</param>
        /// <param name="Number">Número do NFE.</param>
        /// <param name="CheckCode">Código de Verificação da NFE.</param>
        /// <param name="Status">Status da NFE.</param>
        /// <param name="RpsType">Tipo da RPS.</param>
        /// <param name="RpsStatus">Status da RPS.</param>
        /// <param name="TaxationType">Tipo da tributação.</param>
        /// <param name="IssuedOn">Data de emissão.</param>
        /// <param name="CancelledOn">Data de cancelamento.</param>
        /// <param name="RpsSerialNumber">Número de serie da RPS.</param>
        /// <param name="RpsNumber">Número da RPS.</param>
        /// <param name="CityServiceCode">Código do servico prestado no Municipio.</param>
        /// <param name="FederalServiceCode">Código do servico prestado federal.</param>
        /// <param name="Description">Descrição do serviço no municipio.</param>
        /// <param name="ServicesAmount">Valor do serviços.</param>
        /// <param name="DeductionsAmount">Valor de deduções.</param>
        /// <param name="DiscountUnconditionedAmount">Valor do desconto incondicionado.</param>
        /// <param name="DiscountConditionedAmount">Valor do desconto condicionado.</param>
        /// <param name="BaseTaxAmount">Valor da base de calculo de impostos.</param>
        /// <param name="IssRate">Aliquota do ISS.</param>
        /// <param name="IssTaxAmount">Valor do ISS.</param>
        /// <param name="IrAmountWithheld">Valor retido do Imposto de Renda (IR).</param>
        /// <param name="PisAmountWithheld">Valor retido do PIS.</param>
        /// <param name="CofinsAmountWithheld">Valor retido do COFINS.</param>
        /// <param name="CsllAmountWithheld">Valor retido do CSLL.</param>
        /// <param name="InssAmountWithheld">Valor retido do INSS.</param>
        /// <param name="IssAmountWithheld">Valor retido do ISS.</param>
        /// <param name="OthersAmountWithheld">Valor de outras retenções.</param>
        /// <param name="AmountWithheld">Valor das retenções.</param>
        /// <param name="AmountNet">Valor líquido.</param>
        /// <param name="ApproximateTax">Tributos aproximados.</param>
        /// <param name="CreatedOn">Data de criação.</param>
        /// <param name="ModifiedOn">Data da última modificação.</param>
        public ServiceInvoiceResource(string Id = default(string), EnvironmentEnum? Environment = default(EnvironmentEnum?), FlowStatusEnum? FlowStatus = default(FlowStatusEnum?), string FlowMessage = default(string), LegalPerson Provider = default(LegalPerson), Person Borrower = default(Person), long? BatchNumber = default(long?), string BatchCheckNumber = default(string), long? Number = default(long?), string CheckCode = default(string), StatusEnum? Status = default(StatusEnum?), RpsTypeEnum? RpsType = default(RpsTypeEnum?), RpsStatusEnum? RpsStatus = default(RpsStatusEnum?), TaxationTypeEnum? TaxationType = default(TaxationTypeEnum?), DateTime? IssuedOn = default(DateTime?), DateTime? CancelledOn = default(DateTime?), string RpsSerialNumber = default(string), long? RpsNumber = default(long?), string CityServiceCode = default(string), string FederalServiceCode = default(string), string Description = default(string), double? ServicesAmount = default(double?), double? DeductionsAmount = default(double?), double? DiscountUnconditionedAmount = default(double?), double? DiscountConditionedAmount = default(double?), double? BaseTaxAmount = default(double?), double? IssRate = default(double?), double? IssTaxAmount = default(double?), double? IrAmountWithheld = default(double?), double? PisAmountWithheld = default(double?), double? CofinsAmountWithheld = default(double?), double? CsllAmountWithheld = default(double?), double? InssAmountWithheld = default(double?), double? IssAmountWithheld = default(double?), double? OthersAmountWithheld = default(double?), double? AmountWithheld = default(double?), double? AmountNet = default(double?), ServiceInvoiceApproximateTaxesResource ApproximateTax = default(ServiceInvoiceApproximateTaxesResource), DateTime? CreatedOn = default(DateTime?), DateTime? ModifiedOn = default(DateTime?))
        {
            // to ensure "Environment" is required (not null)
            if (Environment == null)
            {
                throw new InvalidDataException("Environment is a required property for ServiceInvoiceResource and cannot be null");
            }
            else
            {
                this.Environment = Environment;
            }
            this.Id = Id;
            this.FlowStatus = FlowStatus;
            this.FlowMessage = FlowMessage;
            this.Provider = Provider;
            this.Borrower = Borrower;
            this.BatchNumber = BatchNumber;
            this.BatchCheckNumber = BatchCheckNumber;
            this.Number = Number;
            this.CheckCode = CheckCode;
            this.Status = Status;
            this.RpsType = RpsType;
            this.RpsStatus = RpsStatus;
            this.TaxationType = TaxationType;
            this.IssuedOn = IssuedOn;
            this.CancelledOn = CancelledOn;
            this.RpsSerialNumber = RpsSerialNumber;
            this.RpsNumber = RpsNumber;
            this.CityServiceCode = CityServiceCode;
            this.FederalServiceCode = FederalServiceCode;
            this.Description = Description;
            this.ServicesAmount = ServicesAmount;
            this.DeductionsAmount = DeductionsAmount;
            this.DiscountUnconditionedAmount = DiscountUnconditionedAmount;
            this.DiscountConditionedAmount = DiscountConditionedAmount;
            this.BaseTaxAmount = BaseTaxAmount;
            this.IssRate = IssRate;
            this.IssTaxAmount = IssTaxAmount;
            this.IrAmountWithheld = IrAmountWithheld;
            this.PisAmountWithheld = PisAmountWithheld;
            this.CofinsAmountWithheld = CofinsAmountWithheld;
            this.CsllAmountWithheld = CsllAmountWithheld;
            this.InssAmountWithheld = InssAmountWithheld;
            this.IssAmountWithheld = IssAmountWithheld;
            this.OthersAmountWithheld = OthersAmountWithheld;
            this.AmountWithheld = AmountWithheld;
            this.AmountNet = AmountNet;
            this.ApproximateTax = ApproximateTax;
            this.CreatedOn = CreatedOn;
            this.ModifiedOn = ModifiedOn;
        }
        
        /// <summary>
        /// Identificação
        /// </summary>
        /// <value>Identificação</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Mensagem de processamento
        /// </summary>
        /// <value>Mensagem de processamento</value>
        [DataMember(Name="flowMessage", EmitDefaultValue=false)]
        public string FlowMessage { get; set; }
        /// <summary>
        /// Prestador dos serviços
        /// </summary>
        /// <value>Prestador dos serviços</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public LegalPerson Provider { get; set; }
        /// <summary>
        /// Tomador dos serviços
        /// </summary>
        /// <value>Tomador dos serviços</value>
        [DataMember(Name="borrower", EmitDefaultValue=false)]
        public Person Borrower { get; set; }
        /// <summary>
        /// Número do lote da RPS
        /// </summary>
        /// <value>Número do lote da RPS</value>
        [DataMember(Name="batchNumber", EmitDefaultValue=false)]
        public long? BatchNumber { get; set; }
        /// <summary>
        /// Número do protocolo do lote da RPS
        /// </summary>
        /// <value>Número do protocolo do lote da RPS</value>
        [DataMember(Name="batchCheckNumber", EmitDefaultValue=false)]
        public string BatchCheckNumber { get; set; }
        /// <summary>
        /// Número do NFE
        /// </summary>
        /// <value>Número do NFE</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public long? Number { get; set; }
        /// <summary>
        /// Código de Verificação da NFE
        /// </summary>
        /// <value>Código de Verificação da NFE</value>
        [DataMember(Name="checkCode", EmitDefaultValue=false)]
        public string CheckCode { get; set; }
        /// <summary>
        /// Data de emissão
        /// </summary>
        /// <value>Data de emissão</value>
        [DataMember(Name="issuedOn", EmitDefaultValue=false)]
        public DateTime? IssuedOn { get; set; }
        /// <summary>
        /// Data de cancelamento
        /// </summary>
        /// <value>Data de cancelamento</value>
        [DataMember(Name="cancelledOn", EmitDefaultValue=false)]
        public DateTime? CancelledOn { get; set; }
        /// <summary>
        /// Número de serie da RPS
        /// </summary>
        /// <value>Número de serie da RPS</value>
        [DataMember(Name="rpsSerialNumber", EmitDefaultValue=false)]
        public string RpsSerialNumber { get; set; }
        /// <summary>
        /// Número da RPS
        /// </summary>
        /// <value>Número da RPS</value>
        [DataMember(Name="rpsNumber", EmitDefaultValue=false)]
        public long? RpsNumber { get; set; }
        /// <summary>
        /// Código do servico prestado no Municipio
        /// </summary>
        /// <value>Código do servico prestado no Municipio</value>
        [DataMember(Name="cityServiceCode", EmitDefaultValue=false)]
        public string CityServiceCode { get; set; }
        /// <summary>
        /// Código do servico prestado federal
        /// </summary>
        /// <value>Código do servico prestado federal</value>
        [DataMember(Name="federalServiceCode", EmitDefaultValue=false)]
        public string FederalServiceCode { get; set; }
        /// <summary>
        /// Descrição do serviço no municipio
        /// </summary>
        /// <value>Descrição do serviço no municipio</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Valor do serviços
        /// </summary>
        /// <value>Valor do serviços</value>
        [DataMember(Name="servicesAmount", EmitDefaultValue=false)]
        public double? ServicesAmount { get; set; }
        /// <summary>
        /// Valor de deduções
        /// </summary>
        /// <value>Valor de deduções</value>
        [DataMember(Name="deductionsAmount", EmitDefaultValue=false)]
        public double? DeductionsAmount { get; set; }
        /// <summary>
        /// Valor do desconto incondicionado
        /// </summary>
        /// <value>Valor do desconto incondicionado</value>
        [DataMember(Name="discountUnconditionedAmount", EmitDefaultValue=false)]
        public double? DiscountUnconditionedAmount { get; set; }
        /// <summary>
        /// Valor do desconto condicionado
        /// </summary>
        /// <value>Valor do desconto condicionado</value>
        [DataMember(Name="discountConditionedAmount", EmitDefaultValue=false)]
        public double? DiscountConditionedAmount { get; set; }
        /// <summary>
        /// Valor da base de calculo de impostos
        /// </summary>
        /// <value>Valor da base de calculo de impostos</value>
        [DataMember(Name="baseTaxAmount", EmitDefaultValue=false)]
        public double? BaseTaxAmount { get; set; }
        /// <summary>
        /// Aliquota do ISS
        /// </summary>
        /// <value>Aliquota do ISS</value>
        [DataMember(Name="issRate", EmitDefaultValue=false)]
        public double? IssRate { get; set; }
        /// <summary>
        /// Valor do ISS
        /// </summary>
        /// <value>Valor do ISS</value>
        [DataMember(Name="issTaxAmount", EmitDefaultValue=false)]
        public double? IssTaxAmount { get; set; }
        /// <summary>
        /// Valor retido do Imposto de Renda (IR)
        /// </summary>
        /// <value>Valor retido do Imposto de Renda (IR)</value>
        [DataMember(Name="irAmountWithheld", EmitDefaultValue=false)]
        public double? IrAmountWithheld { get; set; }
        /// <summary>
        /// Valor retido do PIS
        /// </summary>
        /// <value>Valor retido do PIS</value>
        [DataMember(Name="pisAmountWithheld", EmitDefaultValue=false)]
        public double? PisAmountWithheld { get; set; }
        /// <summary>
        /// Valor retido do COFINS
        /// </summary>
        /// <value>Valor retido do COFINS</value>
        [DataMember(Name="cofinsAmountWithheld", EmitDefaultValue=false)]
        public double? CofinsAmountWithheld { get; set; }
        /// <summary>
        /// Valor retido do CSLL
        /// </summary>
        /// <value>Valor retido do CSLL</value>
        [DataMember(Name="csllAmountWithheld", EmitDefaultValue=false)]
        public double? CsllAmountWithheld { get; set; }
        /// <summary>
        /// Valor retido do INSS
        /// </summary>
        /// <value>Valor retido do INSS</value>
        [DataMember(Name="inssAmountWithheld", EmitDefaultValue=false)]
        public double? InssAmountWithheld { get; set; }
        /// <summary>
        /// Valor retido do ISS
        /// </summary>
        /// <value>Valor retido do ISS</value>
        [DataMember(Name="issAmountWithheld", EmitDefaultValue=false)]
        public double? IssAmountWithheld { get; set; }
        /// <summary>
        /// Valor de outras retenções
        /// </summary>
        /// <value>Valor de outras retenções</value>
        [DataMember(Name="othersAmountWithheld", EmitDefaultValue=false)]
        public double? OthersAmountWithheld { get; set; }
        /// <summary>
        /// Valor das retenções
        /// </summary>
        /// <value>Valor das retenções</value>
        [DataMember(Name="amountWithheld", EmitDefaultValue=false)]
        public double? AmountWithheld { get; set; }
        /// <summary>
        /// Valor líquido
        /// </summary>
        /// <value>Valor líquido</value>
        [DataMember(Name="amountNet", EmitDefaultValue=false)]
        public double? AmountNet { get; set; }
        /// <summary>
        /// Tributos aproximados
        /// </summary>
        /// <value>Tributos aproximados</value>
        [DataMember(Name="approximateTax", EmitDefaultValue=false)]
        public ServiceInvoiceApproximateTaxesResource ApproximateTax { get; set; }
        /// <summary>
        /// Data de criação
        /// </summary>
        /// <value>Data de criação</value>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// Data da última modificação
        /// </summary>
        /// <value>Data da última modificação</value>
        [DataMember(Name="modifiedOn", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceInvoiceResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  FlowStatus: ").Append(FlowStatus).Append("\n");
            sb.Append("  FlowMessage: ").Append(FlowMessage).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Borrower: ").Append(Borrower).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  BatchCheckNumber: ").Append(BatchCheckNumber).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  CheckCode: ").Append(CheckCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RpsType: ").Append(RpsType).Append("\n");
            sb.Append("  RpsStatus: ").Append(RpsStatus).Append("\n");
            sb.Append("  TaxationType: ").Append(TaxationType).Append("\n");
            sb.Append("  IssuedOn: ").Append(IssuedOn).Append("\n");
            sb.Append("  CancelledOn: ").Append(CancelledOn).Append("\n");
            sb.Append("  RpsSerialNumber: ").Append(RpsSerialNumber).Append("\n");
            sb.Append("  RpsNumber: ").Append(RpsNumber).Append("\n");
            sb.Append("  CityServiceCode: ").Append(CityServiceCode).Append("\n");
            sb.Append("  FederalServiceCode: ").Append(FederalServiceCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ServicesAmount: ").Append(ServicesAmount).Append("\n");
            sb.Append("  DeductionsAmount: ").Append(DeductionsAmount).Append("\n");
            sb.Append("  DiscountUnconditionedAmount: ").Append(DiscountUnconditionedAmount).Append("\n");
            sb.Append("  DiscountConditionedAmount: ").Append(DiscountConditionedAmount).Append("\n");
            sb.Append("  BaseTaxAmount: ").Append(BaseTaxAmount).Append("\n");
            sb.Append("  IssRate: ").Append(IssRate).Append("\n");
            sb.Append("  IssTaxAmount: ").Append(IssTaxAmount).Append("\n");
            sb.Append("  IrAmountWithheld: ").Append(IrAmountWithheld).Append("\n");
            sb.Append("  PisAmountWithheld: ").Append(PisAmountWithheld).Append("\n");
            sb.Append("  CofinsAmountWithheld: ").Append(CofinsAmountWithheld).Append("\n");
            sb.Append("  CsllAmountWithheld: ").Append(CsllAmountWithheld).Append("\n");
            sb.Append("  InssAmountWithheld: ").Append(InssAmountWithheld).Append("\n");
            sb.Append("  IssAmountWithheld: ").Append(IssAmountWithheld).Append("\n");
            sb.Append("  OthersAmountWithheld: ").Append(OthersAmountWithheld).Append("\n");
            sb.Append("  AmountWithheld: ").Append(AmountWithheld).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  ApproximateTax: ").Append(ApproximateTax).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServiceInvoiceResource);
        }

        /// <summary>
        /// Returns true if ServiceInvoiceResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceInvoiceResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceInvoiceResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Environment == other.Environment ||
                    this.Environment != null &&
                    this.Environment.Equals(other.Environment)
                ) && 
                (
                    this.FlowStatus == other.FlowStatus ||
                    this.FlowStatus != null &&
                    this.FlowStatus.Equals(other.FlowStatus)
                ) && 
                (
                    this.FlowMessage == other.FlowMessage ||
                    this.FlowMessage != null &&
                    this.FlowMessage.Equals(other.FlowMessage)
                ) && 
                (
                    this.Provider == other.Provider ||
                    this.Provider != null &&
                    this.Provider.Equals(other.Provider)
                ) && 
                (
                    this.Borrower == other.Borrower ||
                    this.Borrower != null &&
                    this.Borrower.Equals(other.Borrower)
                ) && 
                (
                    this.BatchNumber == other.BatchNumber ||
                    this.BatchNumber != null &&
                    this.BatchNumber.Equals(other.BatchNumber)
                ) && 
                (
                    this.BatchCheckNumber == other.BatchCheckNumber ||
                    this.BatchCheckNumber != null &&
                    this.BatchCheckNumber.Equals(other.BatchCheckNumber)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.CheckCode == other.CheckCode ||
                    this.CheckCode != null &&
                    this.CheckCode.Equals(other.CheckCode)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.RpsType == other.RpsType ||
                    this.RpsType != null &&
                    this.RpsType.Equals(other.RpsType)
                ) && 
                (
                    this.RpsStatus == other.RpsStatus ||
                    this.RpsStatus != null &&
                    this.RpsStatus.Equals(other.RpsStatus)
                ) && 
                (
                    this.TaxationType == other.TaxationType ||
                    this.TaxationType != null &&
                    this.TaxationType.Equals(other.TaxationType)
                ) && 
                (
                    this.IssuedOn == other.IssuedOn ||
                    this.IssuedOn != null &&
                    this.IssuedOn.Equals(other.IssuedOn)
                ) && 
                (
                    this.CancelledOn == other.CancelledOn ||
                    this.CancelledOn != null &&
                    this.CancelledOn.Equals(other.CancelledOn)
                ) && 
                (
                    this.RpsSerialNumber == other.RpsSerialNumber ||
                    this.RpsSerialNumber != null &&
                    this.RpsSerialNumber.Equals(other.RpsSerialNumber)
                ) && 
                (
                    this.RpsNumber == other.RpsNumber ||
                    this.RpsNumber != null &&
                    this.RpsNumber.Equals(other.RpsNumber)
                ) && 
                (
                    this.CityServiceCode == other.CityServiceCode ||
                    this.CityServiceCode != null &&
                    this.CityServiceCode.Equals(other.CityServiceCode)
                ) && 
                (
                    this.FederalServiceCode == other.FederalServiceCode ||
                    this.FederalServiceCode != null &&
                    this.FederalServiceCode.Equals(other.FederalServiceCode)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ServicesAmount == other.ServicesAmount ||
                    this.ServicesAmount != null &&
                    this.ServicesAmount.Equals(other.ServicesAmount)
                ) && 
                (
                    this.DeductionsAmount == other.DeductionsAmount ||
                    this.DeductionsAmount != null &&
                    this.DeductionsAmount.Equals(other.DeductionsAmount)
                ) && 
                (
                    this.DiscountUnconditionedAmount == other.DiscountUnconditionedAmount ||
                    this.DiscountUnconditionedAmount != null &&
                    this.DiscountUnconditionedAmount.Equals(other.DiscountUnconditionedAmount)
                ) && 
                (
                    this.DiscountConditionedAmount == other.DiscountConditionedAmount ||
                    this.DiscountConditionedAmount != null &&
                    this.DiscountConditionedAmount.Equals(other.DiscountConditionedAmount)
                ) && 
                (
                    this.BaseTaxAmount == other.BaseTaxAmount ||
                    this.BaseTaxAmount != null &&
                    this.BaseTaxAmount.Equals(other.BaseTaxAmount)
                ) && 
                (
                    this.IssRate == other.IssRate ||
                    this.IssRate != null &&
                    this.IssRate.Equals(other.IssRate)
                ) && 
                (
                    this.IssTaxAmount == other.IssTaxAmount ||
                    this.IssTaxAmount != null &&
                    this.IssTaxAmount.Equals(other.IssTaxAmount)
                ) && 
                (
                    this.IrAmountWithheld == other.IrAmountWithheld ||
                    this.IrAmountWithheld != null &&
                    this.IrAmountWithheld.Equals(other.IrAmountWithheld)
                ) && 
                (
                    this.PisAmountWithheld == other.PisAmountWithheld ||
                    this.PisAmountWithheld != null &&
                    this.PisAmountWithheld.Equals(other.PisAmountWithheld)
                ) && 
                (
                    this.CofinsAmountWithheld == other.CofinsAmountWithheld ||
                    this.CofinsAmountWithheld != null &&
                    this.CofinsAmountWithheld.Equals(other.CofinsAmountWithheld)
                ) && 
                (
                    this.CsllAmountWithheld == other.CsllAmountWithheld ||
                    this.CsllAmountWithheld != null &&
                    this.CsllAmountWithheld.Equals(other.CsllAmountWithheld)
                ) && 
                (
                    this.InssAmountWithheld == other.InssAmountWithheld ||
                    this.InssAmountWithheld != null &&
                    this.InssAmountWithheld.Equals(other.InssAmountWithheld)
                ) && 
                (
                    this.IssAmountWithheld == other.IssAmountWithheld ||
                    this.IssAmountWithheld != null &&
                    this.IssAmountWithheld.Equals(other.IssAmountWithheld)
                ) && 
                (
                    this.OthersAmountWithheld == other.OthersAmountWithheld ||
                    this.OthersAmountWithheld != null &&
                    this.OthersAmountWithheld.Equals(other.OthersAmountWithheld)
                ) && 
                (
                    this.AmountWithheld == other.AmountWithheld ||
                    this.AmountWithheld != null &&
                    this.AmountWithheld.Equals(other.AmountWithheld)
                ) && 
                (
                    this.AmountNet == other.AmountNet ||
                    this.AmountNet != null &&
                    this.AmountNet.Equals(other.AmountNet)
                ) && 
                (
                    this.ApproximateTax == other.ApproximateTax ||
                    this.ApproximateTax != null &&
                    this.ApproximateTax.Equals(other.ApproximateTax)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.ModifiedOn == other.ModifiedOn ||
                    this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(other.ModifiedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Environment != null)
                    hash = hash * 59 + this.Environment.GetHashCode();
                if (this.FlowStatus != null)
                    hash = hash * 59 + this.FlowStatus.GetHashCode();
                if (this.FlowMessage != null)
                    hash = hash * 59 + this.FlowMessage.GetHashCode();
                if (this.Provider != null)
                    hash = hash * 59 + this.Provider.GetHashCode();
                if (this.Borrower != null)
                    hash = hash * 59 + this.Borrower.GetHashCode();
                if (this.BatchNumber != null)
                    hash = hash * 59 + this.BatchNumber.GetHashCode();
                if (this.BatchCheckNumber != null)
                    hash = hash * 59 + this.BatchCheckNumber.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.CheckCode != null)
                    hash = hash * 59 + this.CheckCode.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.RpsType != null)
                    hash = hash * 59 + this.RpsType.GetHashCode();
                if (this.RpsStatus != null)
                    hash = hash * 59 + this.RpsStatus.GetHashCode();
                if (this.TaxationType != null)
                    hash = hash * 59 + this.TaxationType.GetHashCode();
                if (this.IssuedOn != null)
                    hash = hash * 59 + this.IssuedOn.GetHashCode();
                if (this.CancelledOn != null)
                    hash = hash * 59 + this.CancelledOn.GetHashCode();
                if (this.RpsSerialNumber != null)
                    hash = hash * 59 + this.RpsSerialNumber.GetHashCode();
                if (this.RpsNumber != null)
                    hash = hash * 59 + this.RpsNumber.GetHashCode();
                if (this.CityServiceCode != null)
                    hash = hash * 59 + this.CityServiceCode.GetHashCode();
                if (this.FederalServiceCode != null)
                    hash = hash * 59 + this.FederalServiceCode.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ServicesAmount != null)
                    hash = hash * 59 + this.ServicesAmount.GetHashCode();
                if (this.DeductionsAmount != null)
                    hash = hash * 59 + this.DeductionsAmount.GetHashCode();
                if (this.DiscountUnconditionedAmount != null)
                    hash = hash * 59 + this.DiscountUnconditionedAmount.GetHashCode();
                if (this.DiscountConditionedAmount != null)
                    hash = hash * 59 + this.DiscountConditionedAmount.GetHashCode();
                if (this.BaseTaxAmount != null)
                    hash = hash * 59 + this.BaseTaxAmount.GetHashCode();
                if (this.IssRate != null)
                    hash = hash * 59 + this.IssRate.GetHashCode();
                if (this.IssTaxAmount != null)
                    hash = hash * 59 + this.IssTaxAmount.GetHashCode();
                if (this.IrAmountWithheld != null)
                    hash = hash * 59 + this.IrAmountWithheld.GetHashCode();
                if (this.PisAmountWithheld != null)
                    hash = hash * 59 + this.PisAmountWithheld.GetHashCode();
                if (this.CofinsAmountWithheld != null)
                    hash = hash * 59 + this.CofinsAmountWithheld.GetHashCode();
                if (this.CsllAmountWithheld != null)
                    hash = hash * 59 + this.CsllAmountWithheld.GetHashCode();
                if (this.InssAmountWithheld != null)
                    hash = hash * 59 + this.InssAmountWithheld.GetHashCode();
                if (this.IssAmountWithheld != null)
                    hash = hash * 59 + this.IssAmountWithheld.GetHashCode();
                if (this.OthersAmountWithheld != null)
                    hash = hash * 59 + this.OthersAmountWithheld.GetHashCode();
                if (this.AmountWithheld != null)
                    hash = hash * 59 + this.AmountWithheld.GetHashCode();
                if (this.AmountNet != null)
                    hash = hash * 59 + this.AmountNet.GetHashCode();
                if (this.ApproximateTax != null)
                    hash = hash * 59 + this.ApproximateTax.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hash = hash * 59 + this.ModifiedOn.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
