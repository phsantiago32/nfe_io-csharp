/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceInvoiceApproximateTaxesResource
    /// </summary>
    [DataContract]
    public partial class ServiceInvoiceApproximateTaxesResource :  IEquatable<ServiceInvoiceApproximateTaxesResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceInvoiceApproximateTaxesResource" /> class.
        /// </summary>
        /// <param name="Source">Nome da fonte da taxa.</param>
        /// <param name="Version">Versão da taxa baseado na fonte.</param>
        /// <param name="TotalRate">Taxa dos tributos aproximados.</param>
        public ServiceInvoiceApproximateTaxesResource(string Source = default(string), string Version = default(string), double? TotalRate = default(double?))
        {
            this.Source = Source;
            this.Version = Version;
            this.TotalRate = TotalRate;
        }
        
        /// <summary>
        /// Nome da fonte da taxa
        /// </summary>
        /// <value>Nome da fonte da taxa</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Versão da taxa baseado na fonte
        /// </summary>
        /// <value>Versão da taxa baseado na fonte</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// Taxa dos tributos aproximados
        /// </summary>
        /// <value>Taxa dos tributos aproximados</value>
        [DataMember(Name="totalRate", EmitDefaultValue=false)]
        public double? TotalRate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceInvoiceApproximateTaxesResource {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  TotalRate: ").Append(TotalRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServiceInvoiceApproximateTaxesResource);
        }

        /// <summary>
        /// Returns true if ServiceInvoiceApproximateTaxesResource instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceInvoiceApproximateTaxesResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceInvoiceApproximateTaxesResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.TotalRate == other.TotalRate ||
                    this.TotalRate != null &&
                    this.TotalRate.Equals(other.TotalRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.TotalRate != null)
                    hash = hash * 59 + this.TotalRate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
