/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LegalPersonResource
    /// </summary>
    [DataContract]
    public partial class LegalPersonResource :  IEquatable<LegalPersonResource>, IValidatableObject
    {
        /// <summary>
        /// Tipo do Regime Tributário
        /// </summary>
        /// <value>Tipo do Regime Tributário</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRegimeEnum
        {
            
            /// <summary>
            /// Enum Isento for "Isento"
            /// </summary>
            [EnumMember(Value = "Isento")]
            Isento,
            
            /// <summary>
            /// Enum MicroempreendedorIndividual for "MicroempreendedorIndividual"
            /// </summary>
            [EnumMember(Value = "MicroempreendedorIndividual")]
            MicroempreendedorIndividual,
            
            /// <summary>
            /// Enum SimplesNacional for "SimplesNacional"
            /// </summary>
            [EnumMember(Value = "SimplesNacional")]
            SimplesNacional,
            
            /// <summary>
            /// Enum LucroPresumido for "LucroPresumido"
            /// </summary>
            [EnumMember(Value = "LucroPresumido")]
            LucroPresumido,
            
            /// <summary>
            /// Enum LucroReal for "LucroReal"
            /// </summary>
            [EnumMember(Value = "LucroReal")]
            LucroReal
        }

        /// <summary>
        /// Código da Natureza Jurídica
        /// </summary>
        /// <value>Código da Natureza Jurídica</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegalNatureEnum
        {
            
            /// <summary>
            /// Enum EmpresaPublica for "EmpresaPublica"
            /// </summary>
            [EnumMember(Value = "EmpresaPublica")]
            EmpresaPublica,
            
            /// <summary>
            /// Enum SociedadeEconomiaMista for "SociedadeEconomiaMista"
            /// </summary>
            [EnumMember(Value = "SociedadeEconomiaMista")]
            SociedadeEconomiaMista,
            
            /// <summary>
            /// Enum SociedadeAnonimaAberta for "SociedadeAnonimaAberta"
            /// </summary>
            [EnumMember(Value = "SociedadeAnonimaAberta")]
            SociedadeAnonimaAberta,
            
            /// <summary>
            /// Enum SociedadeAnonimaFechada for "SociedadeAnonimaFechada"
            /// </summary>
            [EnumMember(Value = "SociedadeAnonimaFechada")]
            SociedadeAnonimaFechada,
            
            /// <summary>
            /// Enum SociedadeEmpresariaLimitada for "SociedadeEmpresariaLimitada"
            /// </summary>
            [EnumMember(Value = "SociedadeEmpresariaLimitada")]
            SociedadeEmpresariaLimitada,
            
            /// <summary>
            /// Enum SociedadeEmpresariaEmNomeColetivo for "SociedadeEmpresariaEmNomeColetivo"
            /// </summary>
            [EnumMember(Value = "SociedadeEmpresariaEmNomeColetivo")]
            SociedadeEmpresariaEmNomeColetivo,
            
            /// <summary>
            /// Enum SociedadeEmpresariaEmComanditaSimples for "SociedadeEmpresariaEmComanditaSimples"
            /// </summary>
            [EnumMember(Value = "SociedadeEmpresariaEmComanditaSimples")]
            SociedadeEmpresariaEmComanditaSimples,
            
            /// <summary>
            /// Enum SociedadeEmpresariaEmComanditaporAcoes for "SociedadeEmpresariaEmComanditaporAcoes"
            /// </summary>
            [EnumMember(Value = "SociedadeEmpresariaEmComanditaporAcoes")]
            SociedadeEmpresariaEmComanditaporAcoes,
            
            /// <summary>
            /// Enum SociedadeemContaParticipacao for "SociedadeemContaParticipacao"
            /// </summary>
            [EnumMember(Value = "SociedadeemContaParticipacao")]
            SociedadeemContaParticipacao,
            
            /// <summary>
            /// Enum Empresario for "Empresario"
            /// </summary>
            [EnumMember(Value = "Empresario")]
            Empresario,
            
            /// <summary>
            /// Enum Cooperativa for "Cooperativa"
            /// </summary>
            [EnumMember(Value = "Cooperativa")]
            Cooperativa,
            
            /// <summary>
            /// Enum ConsorcioSociedades for "ConsorcioSociedades"
            /// </summary>
            [EnumMember(Value = "ConsorcioSociedades")]
            ConsorcioSociedades,
            
            /// <summary>
            /// Enum GrupoSociedades for "GrupoSociedades"
            /// </summary>
            [EnumMember(Value = "GrupoSociedades")]
            GrupoSociedades,
            
            /// <summary>
            /// Enum EmpresaDomiciliadaExterior for "EmpresaDomiciliadaExterior"
            /// </summary>
            [EnumMember(Value = "EmpresaDomiciliadaExterior")]
            EmpresaDomiciliadaExterior,
            
            /// <summary>
            /// Enum ClubeFundoInvestimento for "ClubeFundoInvestimento"
            /// </summary>
            [EnumMember(Value = "ClubeFundoInvestimento")]
            ClubeFundoInvestimento,
            
            /// <summary>
            /// Enum SociedadeSimplesPura for "SociedadeSimplesPura"
            /// </summary>
            [EnumMember(Value = "SociedadeSimplesPura")]
            SociedadeSimplesPura,
            
            /// <summary>
            /// Enum SociedadeSimplesLimitada for "SociedadeSimplesLimitada"
            /// </summary>
            [EnumMember(Value = "SociedadeSimplesLimitada")]
            SociedadeSimplesLimitada,
            
            /// <summary>
            /// Enum SociedadeSimplesEmNomeColetivo for "SociedadeSimplesEmNomeColetivo"
            /// </summary>
            [EnumMember(Value = "SociedadeSimplesEmNomeColetivo")]
            SociedadeSimplesEmNomeColetivo,
            
            /// <summary>
            /// Enum SociedadeSimplesEmComanditaSimples for "SociedadeSimplesEmComanditaSimples"
            /// </summary>
            [EnumMember(Value = "SociedadeSimplesEmComanditaSimples")]
            SociedadeSimplesEmComanditaSimples,
            
            /// <summary>
            /// Enum EmpresaBinacional for "EmpresaBinacional"
            /// </summary>
            [EnumMember(Value = "EmpresaBinacional")]
            EmpresaBinacional,
            
            /// <summary>
            /// Enum ConsorcioEmpregadores for "ConsorcioEmpregadores"
            /// </summary>
            [EnumMember(Value = "ConsorcioEmpregadores")]
            ConsorcioEmpregadores,
            
            /// <summary>
            /// Enum ConsorcioSimples for "ConsorcioSimples"
            /// </summary>
            [EnumMember(Value = "ConsorcioSimples")]
            ConsorcioSimples,
            
            /// <summary>
            /// Enum EireliNaturezaEmpresaria for "EireliNaturezaEmpresaria"
            /// </summary>
            [EnumMember(Value = "EireliNaturezaEmpresaria")]
            EireliNaturezaEmpresaria,
            
            /// <summary>
            /// Enum EireliNaturezaSimples for "EireliNaturezaSimples"
            /// </summary>
            [EnumMember(Value = "EireliNaturezaSimples")]
            EireliNaturezaSimples,
            
            /// <summary>
            /// Enum ServicoNotarial for "ServicoNotarial"
            /// </summary>
            [EnumMember(Value = "ServicoNotarial")]
            ServicoNotarial,
            
            /// <summary>
            /// Enum FundacaoPrivada for "FundacaoPrivada"
            /// </summary>
            [EnumMember(Value = "FundacaoPrivada")]
            FundacaoPrivada,
            
            /// <summary>
            /// Enum ServicoSocialAutonomo for "ServicoSocialAutonomo"
            /// </summary>
            [EnumMember(Value = "ServicoSocialAutonomo")]
            ServicoSocialAutonomo,
            
            /// <summary>
            /// Enum CondominioEdilicio for "CondominioEdilicio"
            /// </summary>
            [EnumMember(Value = "CondominioEdilicio")]
            CondominioEdilicio,
            
            /// <summary>
            /// Enum ComissaoConciliacaoPrevia for "ComissaoConciliacaoPrevia"
            /// </summary>
            [EnumMember(Value = "ComissaoConciliacaoPrevia")]
            ComissaoConciliacaoPrevia,
            
            /// <summary>
            /// Enum EntidadeMediacaoArbitragem for "EntidadeMediacaoArbitragem"
            /// </summary>
            [EnumMember(Value = "EntidadeMediacaoArbitragem")]
            EntidadeMediacaoArbitragem,
            
            /// <summary>
            /// Enum PartidoPolitico for "PartidoPolitico"
            /// </summary>
            [EnumMember(Value = "PartidoPolitico")]
            PartidoPolitico,
            
            /// <summary>
            /// Enum EntidadeSindical for "EntidadeSindical"
            /// </summary>
            [EnumMember(Value = "EntidadeSindical")]
            EntidadeSindical,
            
            /// <summary>
            /// Enum EstabelecimentoBrasilFundacaoAssociacaoEstrangeiras for "EstabelecimentoBrasilFundacaoAssociacaoEstrangeiras"
            /// </summary>
            [EnumMember(Value = "EstabelecimentoBrasilFundacaoAssociacaoEstrangeiras")]
            EstabelecimentoBrasilFundacaoAssociacaoEstrangeiras,
            
            /// <summary>
            /// Enum FundacaoAssociacaoDomiciliadaExterior for "FundacaoAssociacaoDomiciliadaExterior"
            /// </summary>
            [EnumMember(Value = "FundacaoAssociacaoDomiciliadaExterior")]
            FundacaoAssociacaoDomiciliadaExterior,
            
            /// <summary>
            /// Enum OrganizacaoReligiosa for "OrganizacaoReligiosa"
            /// </summary>
            [EnumMember(Value = "OrganizacaoReligiosa")]
            OrganizacaoReligiosa,
            
            /// <summary>
            /// Enum ComunidadeIndigena for "ComunidadeIndigena"
            /// </summary>
            [EnumMember(Value = "ComunidadeIndigena")]
            ComunidadeIndigena,
            
            /// <summary>
            /// Enum FundoPrivado for "FundoPrivado"
            /// </summary>
            [EnumMember(Value = "FundoPrivado")]
            FundoPrivado,
            
            /// <summary>
            /// Enum AssociacaoPrivada for "AssociacaoPrivada"
            /// </summary>
            [EnumMember(Value = "AssociacaoPrivada")]
            AssociacaoPrivada
        }

        /// <summary>
        /// Status no sistema
        /// </summary>
        /// <value>Status no sistema</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Inactive for "Inactive"
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Active for "Active"
            /// </summary>
            [EnumMember(Value = "Active")]
            Active
        }

        /// <summary>
        /// Tipo do Regime Tributário
        /// </summary>
        /// <value>Tipo do Regime Tributário</value>
        [DataMember(Name="taxRegime", EmitDefaultValue=false)]
        public TaxRegimeEnum? TaxRegime { get; set; }
        /// <summary>
        /// Código da Natureza Jurídica
        /// </summary>
        /// <value>Código da Natureza Jurídica</value>
        [DataMember(Name="legalNature", EmitDefaultValue=false)]
        public LegalNatureEnum? LegalNature { get; set; }
        /// <summary>
        /// Status no sistema
        /// </summary>
        /// <value>Status no sistema</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalPersonResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalPersonResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalPersonResource" /> class.
        /// </summary>
        /// <param name="Id">Identificação.</param>
        /// <param name="Name">Nome ou Razão Social (required).</param>
        /// <param name="TradeName">Nome fantasia.</param>
        /// <param name="FederalTaxNumber">CNPJ ou CPF.</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="Address">Endereço (required).</param>
        /// <param name="OpenningDate">Data abertura da empresa.</param>
        /// <param name="TaxRegime">Tipo do Regime Tributário.</param>
        /// <param name="LegalNature">Código da Natureza Jurídica.</param>
        /// <param name="EconomicActivities">Atividades da Empresa.</param>
        /// <param name="CompanyRegistryNumber">Número de Inscricação na Junta Comercial.</param>
        /// <param name="RegionalTaxNumber">Número de Inscricação na SEFAZ (IE).</param>
        /// <param name="MunicipalTaxNumber">Número de Inscricação na Prefeitura (CCM).</param>
        /// <param name="Status">Status no sistema.</param>
        /// <param name="CreatedOn">Data de criação.</param>
        /// <param name="ModifiedOn">Data da última modificação.</param>
        public LegalPersonResource(string Id = default(string), string Name = default(string), string TradeName = default(string), long? FederalTaxNumber = default(long?), string Email = default(string), Address Address = default(Address), DateTime? OpenningDate = default(DateTime?), TaxRegimeEnum? TaxRegime = default(TaxRegimeEnum?), LegalNatureEnum? LegalNature = default(LegalNatureEnum?), List<EconomicActivity> EconomicActivities = default(List<EconomicActivity>), long? CompanyRegistryNumber = default(long?), long? RegionalTaxNumber = default(long?), string MunicipalTaxNumber = default(string), StatusEnum? Status = default(StatusEnum?), DateTime? CreatedOn = default(DateTime?), DateTime? ModifiedOn = default(DateTime?))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for LegalPersonResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for LegalPersonResource and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Address" is required (not null)
            if (Address == null)
            {
                throw new InvalidDataException("Address is a required property for LegalPersonResource and cannot be null");
            }
            else
            {
                this.Address = Address;
            }
            this.Id = Id;
            this.TradeName = TradeName;
            this.FederalTaxNumber = FederalTaxNumber;
            this.OpenningDate = OpenningDate;
            this.TaxRegime = TaxRegime;
            this.LegalNature = LegalNature;
            this.EconomicActivities = EconomicActivities;
            this.CompanyRegistryNumber = CompanyRegistryNumber;
            this.RegionalTaxNumber = RegionalTaxNumber;
            this.MunicipalTaxNumber = MunicipalTaxNumber;
            this.Status = Status;
            this.CreatedOn = CreatedOn;
            this.ModifiedOn = ModifiedOn;
        }
        
        /// <summary>
        /// Identificação
        /// </summary>
        /// <value>Identificação</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Nome ou Razão Social
        /// </summary>
        /// <value>Nome ou Razão Social</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Nome fantasia
        /// </summary>
        /// <value>Nome fantasia</value>
        [DataMember(Name="tradeName", EmitDefaultValue=false)]
        public string TradeName { get; set; }
        /// <summary>
        /// CNPJ ou CPF
        /// </summary>
        /// <value>CNPJ ou CPF</value>
        [DataMember(Name="federalTaxNumber", EmitDefaultValue=false)]
        public long? FederalTaxNumber { get; set; }
        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Endereço
        /// </summary>
        /// <value>Endereço</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// Data abertura da empresa
        /// </summary>
        /// <value>Data abertura da empresa</value>
        [DataMember(Name="openningDate", EmitDefaultValue=false)]
        public DateTime? OpenningDate { get; set; }
        /// <summary>
        /// Atividades da Empresa
        /// </summary>
        /// <value>Atividades da Empresa</value>
        [DataMember(Name="economicActivities", EmitDefaultValue=false)]
        public List<EconomicActivity> EconomicActivities { get; set; }
        /// <summary>
        /// Número de Inscricação na Junta Comercial
        /// </summary>
        /// <value>Número de Inscricação na Junta Comercial</value>
        [DataMember(Name="companyRegistryNumber", EmitDefaultValue=false)]
        public long? CompanyRegistryNumber { get; set; }
        /// <summary>
        /// Número de Inscricação na SEFAZ (IE)
        /// </summary>
        /// <value>Número de Inscricação na SEFAZ (IE)</value>
        [DataMember(Name="regionalTaxNumber", EmitDefaultValue=false)]
        public long? RegionalTaxNumber { get; set; }
        /// <summary>
        /// Número de Inscricação na Prefeitura (CCM)
        /// </summary>
        /// <value>Número de Inscricação na Prefeitura (CCM)</value>
        [DataMember(Name="municipalTaxNumber", EmitDefaultValue=false)]
        public string MunicipalTaxNumber { get; set; }
        /// <summary>
        /// Data de criação
        /// </summary>
        /// <value>Data de criação</value>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public DateTime? CreatedOn { get; set; }
        /// <summary>
        /// Data da última modificação
        /// </summary>
        /// <value>Data da última modificação</value>
        [DataMember(Name="modifiedOn", EmitDefaultValue=false)]
        public DateTime? ModifiedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalPersonResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TradeName: ").Append(TradeName).Append("\n");
            sb.Append("  FederalTaxNumber: ").Append(FederalTaxNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  OpenningDate: ").Append(OpenningDate).Append("\n");
            sb.Append("  TaxRegime: ").Append(TaxRegime).Append("\n");
            sb.Append("  LegalNature: ").Append(LegalNature).Append("\n");
            sb.Append("  EconomicActivities: ").Append(EconomicActivities).Append("\n");
            sb.Append("  CompanyRegistryNumber: ").Append(CompanyRegistryNumber).Append("\n");
            sb.Append("  RegionalTaxNumber: ").Append(RegionalTaxNumber).Append("\n");
            sb.Append("  MunicipalTaxNumber: ").Append(MunicipalTaxNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LegalPersonResource);
        }

        /// <summary>
        /// Returns true if LegalPersonResource instances are equal
        /// </summary>
        /// <param name="other">Instance of LegalPersonResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalPersonResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.TradeName == other.TradeName ||
                    this.TradeName != null &&
                    this.TradeName.Equals(other.TradeName)
                ) && 
                (
                    this.FederalTaxNumber == other.FederalTaxNumber ||
                    this.FederalTaxNumber != null &&
                    this.FederalTaxNumber.Equals(other.FederalTaxNumber)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.OpenningDate == other.OpenningDate ||
                    this.OpenningDate != null &&
                    this.OpenningDate.Equals(other.OpenningDate)
                ) && 
                (
                    this.TaxRegime == other.TaxRegime ||
                    this.TaxRegime != null &&
                    this.TaxRegime.Equals(other.TaxRegime)
                ) && 
                (
                    this.LegalNature == other.LegalNature ||
                    this.LegalNature != null &&
                    this.LegalNature.Equals(other.LegalNature)
                ) && 
                (
                    this.EconomicActivities == other.EconomicActivities ||
                    this.EconomicActivities != null &&
                    this.EconomicActivities.SequenceEqual(other.EconomicActivities)
                ) && 
                (
                    this.CompanyRegistryNumber == other.CompanyRegistryNumber ||
                    this.CompanyRegistryNumber != null &&
                    this.CompanyRegistryNumber.Equals(other.CompanyRegistryNumber)
                ) && 
                (
                    this.RegionalTaxNumber == other.RegionalTaxNumber ||
                    this.RegionalTaxNumber != null &&
                    this.RegionalTaxNumber.Equals(other.RegionalTaxNumber)
                ) && 
                (
                    this.MunicipalTaxNumber == other.MunicipalTaxNumber ||
                    this.MunicipalTaxNumber != null &&
                    this.MunicipalTaxNumber.Equals(other.MunicipalTaxNumber)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.ModifiedOn == other.ModifiedOn ||
                    this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(other.ModifiedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.TradeName != null)
                    hash = hash * 59 + this.TradeName.GetHashCode();
                if (this.FederalTaxNumber != null)
                    hash = hash * 59 + this.FederalTaxNumber.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.OpenningDate != null)
                    hash = hash * 59 + this.OpenningDate.GetHashCode();
                if (this.TaxRegime != null)
                    hash = hash * 59 + this.TaxRegime.GetHashCode();
                if (this.LegalNature != null)
                    hash = hash * 59 + this.LegalNature.GetHashCode();
                if (this.EconomicActivities != null)
                    hash = hash * 59 + this.EconomicActivities.GetHashCode();
                if (this.CompanyRegistryNumber != null)
                    hash = hash * 59 + this.CompanyRegistryNumber.GetHashCode();
                if (this.RegionalTaxNumber != null)
                    hash = hash * 59 + this.RegionalTaxNumber.GetHashCode();
                if (this.MunicipalTaxNumber != null)
                    hash = hash * 59 + this.MunicipalTaxNumber.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.ModifiedOn != null)
                    hash = hash * 59 + this.ModifiedOn.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
