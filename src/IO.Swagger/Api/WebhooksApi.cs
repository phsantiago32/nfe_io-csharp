/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Excluir um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Object</returns>
        Object WebhooksDelete (long? hookId);

        /// <summary>
        /// Excluir um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WebhooksDeleteWithHttpInfo (long? hookId);
        /// <summary>
        /// Listar os webhooks da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookCollectionResource</returns>
        WebhookCollectionResource WebhooksGet ();

        /// <summary>
        /// Listar os webhooks da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookCollectionResource</returns>
        ApiResponse<WebhookCollectionResource> WebhooksGetWithHttpInfo ();
        /// <summary>
        /// Obter os detalhes de um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        WebhookSingleResource WebhooksGet_0 (long? hookId);

        /// <summary>
        /// Obter os detalhes de um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        ApiResponse<WebhookSingleResource> WebhooksGet_0WithHttpInfo (long? hookId);
        /// <summary>
        /// Criar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        WebhookSingleResource WebhooksPost (WebhookResource item);

        /// <summary>
        /// Criar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        ApiResponse<WebhookSingleResource> WebhooksPostWithHttpInfo (WebhookResource item);
        /// <summary>
        /// Atualizar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        WebhookSingleResource WebhooksPut (long? hookId, WebhookResource item);

        /// <summary>
        /// Atualizar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        ApiResponse<WebhookSingleResource> WebhooksPutWithHttpInfo (long? hookId, WebhookResource item);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Excluir um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WebhooksDeleteAsync (long? hookId);

        /// <summary>
        /// Excluir um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WebhooksDeleteAsyncWithHttpInfo (long? hookId);
        /// <summary>
        /// Listar os webhooks da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookCollectionResource</returns>
        System.Threading.Tasks.Task<WebhookCollectionResource> WebhooksGetAsync ();

        /// <summary>
        /// Listar os webhooks da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookCollectionResource>> WebhooksGetAsyncWithHttpInfo ();
        /// <summary>
        /// Obter os detalhes de um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        System.Threading.Tasks.Task<WebhookSingleResource> WebhooksGet_0Async (long? hookId);

        /// <summary>
        /// Obter os detalhes de um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksGet_0AsyncWithHttpInfo (long? hookId);
        /// <summary>
        /// Criar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        System.Threading.Tasks.Task<WebhookSingleResource> WebhooksPostAsync (WebhookResource item);

        /// <summary>
        /// Criar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksPostAsyncWithHttpInfo (WebhookResource item);
        /// <summary>
        /// Atualizar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        System.Threading.Tasks.Task<WebhookSingleResource> WebhooksPutAsync (long? hookId, WebhookResource item);

        /// <summary>
        /// Atualizar um webhook da conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksPutAsyncWithHttpInfo (long? hookId, WebhookResource item);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Excluir um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Object</returns>
        public Object WebhooksDelete (long? hookId)
        {
             ApiResponse<Object> localVarResponse = WebhooksDeleteWithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Excluir um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WebhooksDeleteWithHttpInfo (long? hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksDelete");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Excluir um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WebhooksDeleteAsync (long? hookId)
        {
             ApiResponse<Object> localVarResponse = await WebhooksDeleteAsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Excluir um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WebhooksDeleteAsyncWithHttpInfo (long? hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksDelete");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Listar os webhooks da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>WebhookCollectionResource</returns>
        public WebhookCollectionResource WebhooksGet ()
        {
             ApiResponse<WebhookCollectionResource> localVarResponse = WebhooksGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listar os webhooks da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of WebhookCollectionResource</returns>
        public ApiResponse< WebhookCollectionResource > WebhooksGetWithHttpInfo ()
        {

            var localVarPath = "/v1/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookCollectionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCollectionResource)));
            
        }

        /// <summary>
        /// Listar os webhooks da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of WebhookCollectionResource</returns>
        public async System.Threading.Tasks.Task<WebhookCollectionResource> WebhooksGetAsync ()
        {
             ApiResponse<WebhookCollectionResource> localVarResponse = await WebhooksGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listar os webhooks da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (WebhookCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookCollectionResource>> WebhooksGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookCollectionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCollectionResource)));
            
        }

        /// <summary>
        /// Obter os detalhes de um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        public WebhookSingleResource WebhooksGet_0 (long? hookId)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = WebhooksGet_0WithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obter os detalhes de um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        public ApiResponse< WebhookSingleResource > WebhooksGet_0WithHttpInfo (long? hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksGet_0");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

        /// <summary>
        /// Obter os detalhes de um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        public async System.Threading.Tasks.Task<WebhookSingleResource> WebhooksGet_0Async (long? hookId)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = await WebhooksGet_0AsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obter os detalhes de um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksGet_0AsyncWithHttpInfo (long? hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksGet_0");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

        /// <summary>
        /// Criar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        public WebhookSingleResource WebhooksPost (WebhookResource item)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = WebhooksPostWithHttpInfo(item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Criar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        public ApiResponse< WebhookSingleResource > WebhooksPostWithHttpInfo (WebhookResource item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling WebhooksApi->WebhooksPost");

            var localVarPath = "/v1/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

        /// <summary>
        /// Criar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        public async System.Threading.Tasks.Task<WebhookSingleResource> WebhooksPostAsync (WebhookResource item)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = await WebhooksPostAsyncWithHttpInfo(item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Criar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksPostAsyncWithHttpInfo (WebhookResource item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling WebhooksApi->WebhooksPost");

            var localVarPath = "/v1/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

        /// <summary>
        /// Atualizar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>WebhookSingleResource</returns>
        public WebhookSingleResource WebhooksPut (long? hookId, WebhookResource item)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = WebhooksPutWithHttpInfo(hookId, item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Atualizar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>ApiResponse of WebhookSingleResource</returns>
        public ApiResponse< WebhookSingleResource > WebhooksPutWithHttpInfo (long? hookId, WebhookResource item)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling WebhooksApi->WebhooksPut");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

        /// <summary>
        /// Atualizar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of WebhookSingleResource</returns>
        public async System.Threading.Tasks.Task<WebhookSingleResource> WebhooksPutAsync (long? hookId, WebhookResource item)
        {
             ApiResponse<WebhookSingleResource> localVarResponse = await WebhooksPutAsyncWithHttpInfo(hookId, item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Atualizar um webhook da conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">ID do webhook</param>
        /// <param name="item">Dados do webhook</param>
        /// <returns>Task of ApiResponse (WebhookSingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookSingleResource>> WebhooksPutAsyncWithHttpInfo (long? hookId, WebhookResource item)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->WebhooksPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling WebhooksApi->WebhooksPut");

            var localVarPath = "/v1/hooks/{hook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (hookId != null) localVarPathParams.Add("hook_id", Configuration.ApiClient.ParameterToString(hookId)); // path parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhooksPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookSingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebhookSingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookSingleResource)));
            
        }

    }
}
