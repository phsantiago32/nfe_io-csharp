/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompaniesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>string</returns>
        string CompaniesCertificateUpload (string companyId, System.IO.Stream file, string password);

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CompaniesCertificateUploadWithHttpInfo (string companyId, System.IO.Stream file, string password);
        /// <summary>
        /// Excluir uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Object</returns>
        Object CompaniesDelete (string companyId);

        /// <summary>
        /// Excluir uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CompaniesDeleteWithHttpInfo (string companyId);
        /// <summary>
        /// Listar as empresas ativas de uma conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CompanyCollectionResource</returns>
        CompanyCollectionResource CompaniesGet ();

        /// <summary>
        /// Listar as empresas ativas de uma conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CompanyCollectionResource</returns>
        ApiResponse<CompanyCollectionResource> CompaniesGetWithHttpInfo ();
        /// <summary>
        /// Obter os detalhes de uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>CompanySingleResource</returns>
        CompanySingleResource CompaniesGet_0 (string companyIdOrTaxNumber);

        /// <summary>
        /// Obter os detalhes de uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        ApiResponse<CompanySingleResource> CompaniesGet_0WithHttpInfo (string companyIdOrTaxNumber);
        /// <summary>
        /// Criar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>CompanySingleResource</returns>
        CompanySingleResource CompaniesPost (CompanyResource item);

        /// <summary>
        /// Criar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        ApiResponse<CompanySingleResource> CompaniesPostWithHttpInfo (CompanyResource item);
        /// <summary>
        /// Atualizar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>CompanySingleResource</returns>
        CompanySingleResource CompaniesPut (string companyId, CompanyResource item);

        /// <summary>
        /// Atualizar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        ApiResponse<CompanySingleResource> CompaniesPutWithHttpInfo (string companyId, CompanyResource item);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CompaniesCertificateUploadAsync (string companyId, System.IO.Stream file, string password);

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CompaniesCertificateUploadAsyncWithHttpInfo (string companyId, System.IO.Stream file, string password);
        /// <summary>
        /// Excluir uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CompaniesDeleteAsync (string companyId);

        /// <summary>
        /// Excluir uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesDeleteAsyncWithHttpInfo (string companyId);
        /// <summary>
        /// Listar as empresas ativas de uma conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CompanyCollectionResource</returns>
        System.Threading.Tasks.Task<CompanyCollectionResource> CompaniesGetAsync ();

        /// <summary>
        /// Listar as empresas ativas de uma conta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CompanyCollectionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanyCollectionResource>> CompaniesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Obter os detalhes de uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>Task of CompanySingleResource</returns>
        System.Threading.Tasks.Task<CompanySingleResource> CompaniesGet_0Async (string companyIdOrTaxNumber);

        /// <summary>
        /// Obter os detalhes de uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesGet_0AsyncWithHttpInfo (string companyIdOrTaxNumber);
        /// <summary>
        /// Criar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of CompanySingleResource</returns>
        System.Threading.Tasks.Task<CompanySingleResource> CompaniesPostAsync (CompanyResource item);

        /// <summary>
        /// Criar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesPostAsyncWithHttpInfo (CompanyResource item);
        /// <summary>
        /// Atualizar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of CompanySingleResource</returns>
        System.Threading.Tasks.Task<CompanySingleResource> CompaniesPutAsync (string companyId, CompanyResource item);

        /// <summary>
        /// Atualizar uma empresa
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesPutAsyncWithHttpInfo (string companyId, CompanyResource item);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompaniesApi : ICompaniesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompaniesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompaniesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompaniesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>string</returns>
        public string CompaniesCertificateUpload (string companyId, System.IO.Stream file, string password)
        {
             ApiResponse<string> localVarResponse = CompaniesCertificateUploadWithHttpInfo(companyId, file, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CompaniesCertificateUploadWithHttpInfo (string companyId, System.IO.Stream file, string password)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesCertificateUpload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CompaniesApi->CompaniesCertificateUpload");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling CompaniesApi->CompaniesCertificateUpload");

            var localVarPath = "/v1/companies/{company_id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCertificateUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CompaniesCertificateUploadAsync (string companyId, System.IO.Stream file, string password)
        {
             ApiResponse<string> localVarResponse = await CompaniesCertificateUploadAsyncWithHttpInfo(companyId, file, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload do certificado digital da empresa usando o codificação multipart/form-data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="file">Arquivo do certificado digital com extensao PFX ou P12</param>
        /// <param name="password">Senha do arquivo do certificado digital</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CompaniesCertificateUploadAsyncWithHttpInfo (string companyId, System.IO.Stream file, string password)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesCertificateUpload");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling CompaniesApi->CompaniesCertificateUpload");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling CompaniesApi->CompaniesCertificateUpload");

            var localVarPath = "/v1/companies/{company_id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesCertificateUpload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Excluir uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Object</returns>
        public Object CompaniesDelete (string companyId)
        {
             ApiResponse<Object> localVarResponse = CompaniesDeleteWithHttpInfo(companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Excluir uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CompaniesDeleteWithHttpInfo (string companyId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesDelete");

            var localVarPath = "/v1/companies/{company_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Excluir uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CompaniesDeleteAsync (string companyId)
        {
             ApiResponse<Object> localVarResponse = await CompaniesDeleteAsyncWithHttpInfo(companyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Excluir uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CompaniesDeleteAsyncWithHttpInfo (string companyId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesDelete");

            var localVarPath = "/v1/companies/{company_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Listar as empresas ativas de uma conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CompanyCollectionResource</returns>
        public CompanyCollectionResource CompaniesGet ()
        {
             ApiResponse<CompanyCollectionResource> localVarResponse = CompaniesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Listar as empresas ativas de uma conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CompanyCollectionResource</returns>
        public ApiResponse< CompanyCollectionResource > CompaniesGetWithHttpInfo ()
        {

            var localVarPath = "/v1/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanyCollectionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyCollectionResource)));
            
        }

        /// <summary>
        /// Listar as empresas ativas de uma conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CompanyCollectionResource</returns>
        public async System.Threading.Tasks.Task<CompanyCollectionResource> CompaniesGetAsync ()
        {
             ApiResponse<CompanyCollectionResource> localVarResponse = await CompaniesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Listar as empresas ativas de uma conta 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CompanyCollectionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanyCollectionResource>> CompaniesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanyCollectionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanyCollectionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanyCollectionResource)));
            
        }

        /// <summary>
        /// Obter os detalhes de uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>CompanySingleResource</returns>
        public CompanySingleResource CompaniesGet_0 (string companyIdOrTaxNumber)
        {
             ApiResponse<CompanySingleResource> localVarResponse = CompaniesGet_0WithHttpInfo(companyIdOrTaxNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obter os detalhes de uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        public ApiResponse< CompanySingleResource > CompaniesGet_0WithHttpInfo (string companyIdOrTaxNumber)
        {
            // verify the required parameter 'companyIdOrTaxNumber' is set
            if (companyIdOrTaxNumber == null)
                throw new ApiException(400, "Missing required parameter 'companyIdOrTaxNumber' when calling CompaniesApi->CompaniesGet_0");

            var localVarPath = "/v1/companies/{company_id_or_tax_number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyIdOrTaxNumber != null) localVarPathParams.Add("company_id_or_tax_number", Configuration.ApiClient.ParameterToString(companyIdOrTaxNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

        /// <summary>
        /// Obter os detalhes de uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>Task of CompanySingleResource</returns>
        public async System.Threading.Tasks.Task<CompanySingleResource> CompaniesGet_0Async (string companyIdOrTaxNumber)
        {
             ApiResponse<CompanySingleResource> localVarResponse = await CompaniesGet_0AsyncWithHttpInfo(companyIdOrTaxNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obter os detalhes de uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyIdOrTaxNumber">ID da empresa ou Inscrição Federal (CNPJ)</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesGet_0AsyncWithHttpInfo (string companyIdOrTaxNumber)
        {
            // verify the required parameter 'companyIdOrTaxNumber' is set
            if (companyIdOrTaxNumber == null)
                throw new ApiException(400, "Missing required parameter 'companyIdOrTaxNumber' when calling CompaniesApi->CompaniesGet_0");

            var localVarPath = "/v1/companies/{company_id_or_tax_number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyIdOrTaxNumber != null) localVarPathParams.Add("company_id_or_tax_number", Configuration.ApiClient.ParameterToString(companyIdOrTaxNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesGet_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

        /// <summary>
        /// Criar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>CompanySingleResource</returns>
        public CompanySingleResource CompaniesPost (CompanyResource item)
        {
             ApiResponse<CompanySingleResource> localVarResponse = CompaniesPostWithHttpInfo(item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Criar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        public ApiResponse< CompanySingleResource > CompaniesPostWithHttpInfo (CompanyResource item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling CompaniesApi->CompaniesPost");

            var localVarPath = "/v1/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

        /// <summary>
        /// Criar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of CompanySingleResource</returns>
        public async System.Threading.Tasks.Task<CompanySingleResource> CompaniesPostAsync (CompanyResource item)
        {
             ApiResponse<CompanySingleResource> localVarResponse = await CompaniesPostAsyncWithHttpInfo(item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Criar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesPostAsyncWithHttpInfo (CompanyResource item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling CompaniesApi->CompaniesPost");

            var localVarPath = "/v1/companies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

        /// <summary>
        /// Atualizar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>CompanySingleResource</returns>
        public CompanySingleResource CompaniesPut (string companyId, CompanyResource item)
        {
             ApiResponse<CompanySingleResource> localVarResponse = CompaniesPutWithHttpInfo(companyId, item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Atualizar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>ApiResponse of CompanySingleResource</returns>
        public ApiResponse< CompanySingleResource > CompaniesPutWithHttpInfo (string companyId, CompanyResource item)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling CompaniesApi->CompaniesPut");

            var localVarPath = "/v1/companies/{company_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

        /// <summary>
        /// Atualizar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of CompanySingleResource</returns>
        public async System.Threading.Tasks.Task<CompanySingleResource> CompaniesPutAsync (string companyId, CompanyResource item)
        {
             ApiResponse<CompanySingleResource> localVarResponse = await CompaniesPutAsyncWithHttpInfo(companyId, item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Atualizar uma empresa 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">ID da empresa</param>
        /// <param name="item">Dados da empresa</param>
        /// <returns>Task of ApiResponse (CompanySingleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CompanySingleResource>> CompaniesPutAsyncWithHttpInfo (string companyId, CompanyResource item)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling CompaniesApi->CompaniesPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling CompaniesApi->CompaniesPut");

            var localVarPath = "/v1/companies/{company_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/bson", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyId != null) localVarPathParams.Add("company_id", Configuration.ApiClient.ParameterToString(companyId)); // path parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompaniesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CompanySingleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CompanySingleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CompanySingleResource)));
            
        }

    }
}
