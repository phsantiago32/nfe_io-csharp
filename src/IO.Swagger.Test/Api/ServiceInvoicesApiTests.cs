/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Ploeh.AutoFixture;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ServiceInvoicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>

    [TestFixture]
    public class ServiceInvoicesApiTests
    {
        private ServiceInvoicesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServiceInvoicesApi();
            var apiKeyHeader = new Dictionary<string, string>();
            apiKeyHeader.Add("Authorization", "IZCNaN3gT9NCnjd1Cm6zCP5kK0CFeFqw9fMZNuTgR6fgobSlk8yALCf8lCUyvZZriJI");
            instance.Configuration = new Configuration() { ApiKey = apiKeyHeader };
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            
        }

        /// <summary>
        /// Test an instance of ServiceInvoicesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ServiceInvoicesApi
            //Assert.IsInstanceOfType(typeof(ServiceInvoicesApi), instance, "instance is a ServiceInvoicesApi");
        }

        
        /// <summary>
        /// Test ServiceInvoicesDelete
        /// </summary>
        [Test]
        public void ServiceInvoicesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesDelete(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServiceInvoicesGet
        /// </summary>
        [Test]
        public void ServiceInvoicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //int? pageCount = null;
            //int? pageIndex = null;
            //var response = instance.ServiceInvoicesGet(companyId, pageCount, pageIndex);
            //Assert.IsInstanceOf<ServiceInvoiceCollectionResource> (response, "response is ServiceInvoiceCollectionResource");
        }
        
        /// <summary>
        /// Test ServiceInvoicesGetDocumentPdf
        /// </summary>
        [Test]
        public void ServiceInvoicesGetDocumentPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesGetDocumentPdf(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServiceInvoicesGetDocumentXml
        /// </summary>
        [Test]
        public void ServiceInvoicesGetDocumentXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesGetDocumentXml(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServiceInvoicesGet_0
        /// </summary>
        [Test]
        public void ServiceInvoicesGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesGet_0(companyId, id);
            //Assert.IsInstanceOf<ServiceInvoiceResource> (response, "response is ServiceInvoiceResource");
        }
        
        /// <summary>
        /// Test ServiceInvoicesPost
        /// </summary>
        [Test]
        public void ServiceInvoicesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value

            var companyId = "59444568f933f61ea009dad2";

            var fix = new Fixture();

            var myObj = fix.Create<ServiceInvoiceIssueMessage>();

            var response = instance.ServiceInvoicesPost(companyId, myObj);
            Assert.IsInstanceOf<ServiceInvoiceResource>(response, "response is ServiceInvoiceResource");
        }
        
        /// <summary>
        /// Test ServiceInvoicesPullProcess
        /// </summary>
        [Test]
        public void ServiceInvoicesPullProcessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //DateRange dateRange = null;
            //var response = instance.ServiceInvoicesPullProcess(companyId, dateRange);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServiceInvoicesSendEmail
        /// </summary>
        [Test]
        public void ServiceInvoicesSendEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string companyId = null;
            //string id = null;
            //var response = instance.ServiceInvoicesSendEmail(companyId, id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
