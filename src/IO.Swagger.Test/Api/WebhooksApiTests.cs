/* 
 * Service Invoice API (api.nfe.io)
 *
 * Seja bem-vindo a documentação do NFe.io!    Nossa API foi criada utilizando o padrão REST que possibilita a integração de seu sistema ao nosso, sendo assim você também pode extender ou   recriar as funcionalidades existentes na nossa plataforma, tudo isso consumindo a API que está documentada abaixo.    ### Como usar a documentação?  Logo a seguir você encontrará todos os recursos e metódos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos dirementamente através dela.     ### Como funciona a autenticação?  Você precisa de uma **chave de API (API Key)** para identificar a conta que está realizando solicitações para a API. Para isso você deve colocar sua chave de API no campo que se encontra topo desta página para que os métodos funcionem corretamente.  No seu código e integração temos suporte para autenticação de diversas formas sendo eles: **HTTP Header (Authorization ou X-NFEIO-APIKEY)** ou **HTTP Query String (api_key)** nos dois modos passando o valor da sua chave de api (API Key).  
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebhooksApiTests
    {
        private WebhooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WebhooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhooksApi
            //Assert.IsInstanceOfType(typeof(WebhooksApi), instance, "instance is a WebhooksApi");
        }

        
        /// <summary>
        /// Test WebhooksDelete
        /// </summary>
        [Test]
        public void WebhooksDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? hookId = null;
            //var response = instance.WebhooksDelete(hookId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test WebhooksGet
        /// </summary>
        [Test]
        public void WebhooksGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.WebhooksGet();
            //Assert.IsInstanceOf<WebhookCollectionResource> (response, "response is WebhookCollectionResource");
        }
        
        /// <summary>
        /// Test WebhooksGet_0
        /// </summary>
        [Test]
        public void WebhooksGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? hookId = null;
            //var response = instance.WebhooksGet_0(hookId);
            //Assert.IsInstanceOf<WebhookSingleResource> (response, "response is WebhookSingleResource");
        }
        
        /// <summary>
        /// Test WebhooksPost
        /// </summary>
        [Test]
        public void WebhooksPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookResource item = null;
            //var response = instance.WebhooksPost(item);
            //Assert.IsInstanceOf<WebhookSingleResource> (response, "response is WebhookSingleResource");
        }
        
        /// <summary>
        /// Test WebhooksPut
        /// </summary>
        [Test]
        public void WebhooksPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? hookId = null;
            //WebhookResource item = null;
            //var response = instance.WebhooksPut(hookId, item);
            //Assert.IsInstanceOf<WebhookSingleResource> (response, "response is WebhookSingleResource");
        }
        
    }

}
